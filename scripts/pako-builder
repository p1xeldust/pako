#!/bin/bash
if [ x$1 != x ]; then
	packagename=$1
fi
if [ x$2 != x ]; then
	packageversion=$2
fi
if [ x$3 != x ]; then
	packagearch=$3
fi

menu() {
	echo "[ Pako! package builder ] "
	echo -e "\e[1m├[1] Name:" $packagename
	echo -e "├[2] Version:" $packageversion
	echo -e "├[3] Architecture:" $packagearch
	echo -e "├[4] Dependencies:" $dependencies
	echo -e "├[5] Conflicts:" $conflicts
	echo -e "├[6] Build"
	echo -e "├[7] Exit"
	echo -e "│\e[0m"
}

while true; do
echo "Obsolete"
exit

read -p "└#" choice

case $choice in
	1)
		read -p " └Package name: " packagename
		echo
	;;
	2)
		read -p " └Package version: " packageversion
		echo
	;;
	3)
		read -p " └Package architecture: " packagearch
		echo
	;;
	4)
		read -p " └Package dependencies: " dependencies
		echo
	;;
	5)
		read -p " └Package conflicts: " conflicts
		echo
	;;
	6)
		if [ -f $packagename"_"$packageversion"_"$packagearch.pako ]; then
			rm $packagename"_"$packageversion"_"$packagearch.pako
		fi
		mkdir -p package/{PAKO,source}
		echo -e "name $packagename\nversion $packageversion\narch: $packagearch\ndeps: $dependencies\nconflicts: $conflicts" > package/PAKO/info
cat >> package/PAKO/install << EOF
if [ "\$1" = "--preinst" ]; then
#Put your pre-installation script here!
exit 1;
fi

if [ "\$1" = "--postinst" ]; then
#Put your post-installation script here!
exit 1;
fi
EOF
		echo "Press enter to edit package pre/post-install shell"
		read
		nano package/PAKO/install
		find . | grep -v ./package | grep -v pako-builder | cut -c 2- | tail -n +2 - > package/PAKO/files
		cp -r $(ls $(pwd) | grep -v package) package/source/
		echo "Building" $packagename"_"$packageversion"_"$packagearch.pako
		tar -cJf $packagename"_"$packageversion"_"$packagearch.pako package
		rm -r package
		echo "Done!"
		exit
	;;
	7)
		exit
	;;
esac
done
